@import '../../styles/base';
@import '../../styles/mixins';

.dashboard {
  min-height: 100vh;
  background: color(bg-primary);
  display: flex;
}

.sidebar {
  width: 80px;
  background: color(bg-secondary);
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: spacing(6) 0;
  gap: spacing(6);
  border-right: 1px solid color(border-primary);
}

.sidebarIcon {
  @include neu-icon(medium);
  width: 48px;
  height: 48px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all map-get($transitions, base) $transition-easing;

  &.active {
    background: color(primary);
    
    svg {
      color: white;
    }
  }

  svg {
    color: color(text-secondary);
    transition: color map-get($transitions, base) $transition-easing;
  }

  &:hover {
    svg {
      color: color(text-primary);
    }
  }
}

.mainContent {
  flex: 1;
  padding: spacing(8);
  overflow-y: auto;
  @include custom-scrollbar();
}

.header {
  margin-bottom: spacing(8);
}

.title {
  font-size: font-size(3xl);
  font-weight: font-weight(bold);
  color: color(text-primary);

  .primaryText {
    color: color(primary);
  }
}

// Error Card
.errorCard {
  @include neu-card(medium);
  background: rgba(239, 68, 68, 0.2);
  border: 1px solid rgba(239, 68, 68, 0.5);
  margin-bottom: spacing(4);
  padding: spacing(4);
}

.errorText {
  color: color(error);
}

// Statistics Grid
.statsGrid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: spacing(4);
  margin-bottom: spacing(6);

  @include responsive(sm) {
    grid-template-columns: 1fr;
  }
}

.statCard {
  @include neu-card(medium);
  padding: spacing(5);
  display: flex;
  align-items: center;
  gap: spacing(4);
}

.statIcon {
  width: 56px;
  height: 56px;
  border-radius: map-get($border-radius, base);
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;

  svg {
    color: color(primary);
  }
}

.statContent {
  flex: 1;
}

.statValue {
  font-size: font-size(3xl);
  font-weight: font-weight(bold);
  color: color(text-primary);
  margin-bottom: spacing(1);
}

.statLabel {
  font-size: font-size(sm);
  color: color(text-secondary);
}

// Filters Card
.filtersCard {
  @include neu-card(medium);
  margin-bottom: spacing(6);
  padding: spacing(6);

  @include responsive(sm) {
    padding: spacing(4);
  }
}

.cardHeader {
  display: flex;
  align-items: center;
  gap: spacing(4);
  margin-bottom: spacing(5);

  svg {
    color: color(primary);
  }
}

.cardTitle {
  font-size: font-size(2xl);
  font-weight: font-weight(bold);
  color: color(text-primary);
}

.filtersContent {
  display: flex;
  flex-direction: column;
  gap: spacing(5);

  @include responsive(md) {
    flex-direction: row;
    align-items: flex-end;
  }
}

.filterGroup {
  flex: 1;
}

.filterLabel {
  display: block;
  font-size: font-size(sm);
  font-weight: font-weight(medium);
  color: color(text-primary);
  margin-bottom: spacing(2);
}

.filterButtons {
  display: flex;
  gap: spacing(2);
  flex-wrap: wrap;
}

.filterButton {
  @include neu-button(medium);
  padding: spacing(2) spacing(4);
  font-size: font-size(sm);

  &.active {
    background: color(primary);
    color: white;
    box-shadow: 
      8px 8px 16px rgba(139, 92, 246, 0.4),
      -8px -8px 16px rgba(64, 64, 64, 0.8);
  }
}

.selectInput {
  @include neu-input(medium);
  width: 100%;
  padding: spacing(3) spacing(4);
  cursor: pointer;
}

// Activity Card
.activityCard {
  @include neu-card(medium);
  padding: spacing(6);

  @include responsive(sm) {
    padding: spacing(4);
  }
}

// Timeline
.timeline {
  position: relative;
  padding-left: spacing(6);

  &::before {
    content: '';
    position: absolute;
    left: spacing(3);
    top: 0;
    bottom: 0;
    width: 2px;
    background: color(border-primary);
  }
}

.timelineDay {
  position: relative;
  margin-bottom: spacing(6);

  &:last-child {
    margin-bottom: 0;
  }
}

.timelineDate {
  margin-bottom: spacing(4);
  padding-bottom: spacing(2);
  border-bottom: 1px solid color(border-primary);
}

.dateLabel {
  font-size: font-size(lg);
  font-weight: font-weight(bold);
  color: color(text-primary);
  margin-bottom: spacing(1);
}

.dateCount {
  font-size: font-size(sm);
  color: color(text-secondary);
}

.timelineItems {
  display: flex;
  flex-direction: column;
  gap: spacing(3);
  margin-left: spacing(2);
}

.timelineItem {
  display: flex;
  gap: spacing(3);
  align-items: flex-start;
  position: relative;
}

.timelineDot {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  flex-shrink: 0;
  margin-top: spacing(1);
  box-shadow: 
    0 2px 4px rgba(0, 0, 0, 0.3),
    inset 0 1px 0 rgba(255, 255, 255, 0.2);
}

.timelineContent {
  flex: 1;
  @include neu-card(light);
  padding: spacing(3) spacing(4);
  border-radius: map-get($border-radius, base);
}

.timelineItemTitle {
  font-size: font-size(base);
  font-weight: font-weight(semi);
  color: color(text-primary);
  margin-bottom: spacing(2);
}

.timelineItemMeta {
  display: flex;
  align-items: center;
  gap: spacing(2);
}

.completedBadge {
  display: inline-flex;
  align-items: center;
  gap: spacing(1);
  padding: spacing(1) spacing(3);
  background: color(success);
  color: white;
  font-size: font-size(xs);
  font-weight: font-weight(medium);
  border-radius: map-get($border-radius, full);
}

.pendingBadge {
  display: inline-flex;
  align-items: center;
  padding: spacing(1) spacing(3);
  background: color(warning);
  color: white;
  font-size: font-size(xs);
  font-weight: font-weight(medium);
  border-radius: map-get($border-radius, full);
}

.timelineConnector {
  position: absolute;
  left: spacing(3);
  top: spacing(8);
  bottom: spacing(-4);
  width: 2px;
  background: color(border-primary);
}

// Empty State
.emptyState {
  text-align: center;
  padding: spacing(12);
  color: color(text-secondary);
}

.emptyStateText {
  font-size: font-size(lg);
  color: color(text-muted);
}

// Loading States
.loadingContainer {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  background: color(bg-primary);
}

.loadingSpinner {
  @include neu-icon(medium);
  width: 128px;
  height: 128px;
  display: flex;
  align-items: center;
  justify-content: center;

  svg {
    color: color(primary);
    animation: spin 1s linear infinite;
  }
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

